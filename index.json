[{"content":"Binary Search Nedir? Binary Search her türlü dataset ile çalışabilen ve içerisindeki verinin indexini bulmamızı sağlayan akıllı bir algoritmadır.\nBüyük dizilerde doğrdan tek-tek yapılan kontrolden daha hızlı çalışır fakat dizinin küçükten büyüğe veya büyükten küçüğe doğru sıralı olması zorunludur, aksi halde çalışmayacaktır.\nBinary Search Nasıl Çalışır? Binary search her bir işlemde arama uzayını yarı yarıya indirmek üzerinde kuruludur. Temel mantığı şu şekildedir;\nDizinin tam orasında bulunan veriyi seçer ve bu veri üzerinden kontrol yapar. 3 farklı durum vardır; Seçilen değer aradığımız değere eşit ise aradığımız değer bulunmuştur. Değeri geri döndürülür ve algoritma biter. Seçilen değer aradığımız değerden daha küçük ise aradığımız değer, seçtiğimiz verinin sol tarafındadır. Seçilen değer aradığımız değerden daha büyük ise aradığımız değer, seçtiğimiz verinin sağ tarafındadır. Yukarıdaki 2. veya 3. seçecekten biri gerçekleşmiş ise kümemizin diğer kısmını sileriz ve yarıya indirmiş oluruz. Ardından 1. adımı tekrardan uygularız ve aradığımız değeri bulana kadar devam ederiz. Aşağıdaki örnekte tek-tek yapılan kontrole kıyasla ne kadar hızlı olduğunu görebilirsiniz.\nŞimdi daha iyi anlamak için örnek yapacak olursak [-3,2,4,,4,9,12,34,42,102,157,180]\u0026lsquo;den oluşan veri veri setinden 42 sayısını bulmaya çalışalım;\n-3 2 4 4 9 12 34 42 102 157 180 -3 2 4 4 9 12 34 42 102 157 180 -3 2 4 4 9 12 34 42 102 157 180 -3 2 4 4 9 12 34 42 102 157 180 Kodlama Kodlamaya başlamadan önce aşşağıdaki işlemleri bilmemiz gerekmektedir;\nZaman Karmaşıklığı: O(log n) Yardımcı Alan: O(1) Ortanca Değeri Bulma: en_yuksek + ( en_dusuk + en_yuksek ) / 2 Son maddede neden en_yuksek değer ile topladığımızı merak ediyor olabilirsiniz. Direkt olarak ( en_dusuk + en_yuksek ) / 2 de yapabilirdik fakat bu 100% doğruluk oranı vermeyecektir. Çünkü en düşük ve en yüksek değerlerden daha büyük değerleri aldığımızda başarısız olucaktır. Özellikle en düşük ve en yüksek değerin toplamı datasetimizdeki maximum pozitif değerden büyükse başarısız olucaktır. Sonuçta toplam değer negatif olur ve 2\u0026rsquo;ye bölündüğünde negatif olarak kaldır.\nRecursive Python Javascript # X\u0026#39;in indexini döndürür, yoksa -1 döndürür def binarySearch(arr, l, r, x): # Temeli kontrol et if r \u0026gt;= l: mid = l + (r - l) // 2 # Eğer eleman ortada mevcutsa # kendine eşittir if arr[mid] == x: return mid # Eğer element ortanca değerden küçükse # sadece sol tarafta olabilir elif arr[mid] \u0026gt; x: return binarySearch(arr, l, mid-1, x) # Bunun dışındaki durumlarda # sadece sağ tarafta olabilir else: return binarySearch(arr, mid + 1, r, x) else: # Element dizide yoktur return -1 # Tanımlamalar arr = [2, 3, 4, 10, 40] x = 10 # Fonksiyonu çağırma result = binarySearch(arr, 0, len(arr)-1, x) if result != -1: print(\u0026#34;Element dizinde %d. sırada mevcut\u0026#34; % result) else: print(\u0026#34;Element dizide değildir\u0026#34;) // X\u0026#39;in indexini döndürür, yoksa -1 döndürür function binarySearch(arr, l, r, x){ if (r \u0026gt;= l) { let mid = l + Math.floor((r - l) / 2); // Eğer eleman ortada mevcutsa // kendine eşittir if (arr[mid] == x) return mid; // Eğer element ortanca değerden küçükse // sadece sol tarafta olabilir if (arr[mid] \u0026gt; x) return binarySearch(arr, l, mid - 1, x); // Bunun dışındaki durumlarda // sadece sağ tarafta olabilir return binarySearch(arr, mid + 1, r, x); } // Element dizide yoktur return -1; } let arr = [ 2, 3, 4, 10, 40 ]; let x = 10; let n = arr.length let result = binarySearch(arr, 0, n - 1, x); (result == -1) ? document.write( \u0026#34;Element dizide değildir\u0026#34;) : document.write(`Element dizinde ${result}. sırada mevcut `); Iterative Python Javascript # X\u0026#39;in indexini döndürür, yoksa -1 döndürür def binarySearch(arr, l, r, x): while l \u0026lt;= r: mid = l + (r - l) // 2 # Eğer eleman ortada mevcutsa # kendine eşittir if arr[mid] == x: return mid # Eğer element ortanca değerden küçükse # sadece sol tarafta olabilir elif arr[mid] \u0026lt; x: l = mid + 1 # Bunun dışındaki durumlarda # sadece sağ tarafta olabilir else: r = mid - 1 # Element dizide yoktur return -1 # Tanımlamalar arr = [2, 3, 4, 10, 40] x = 10 # Fonksiyonu çağırma result = binarySearch(arr, 0, len(arr)-1, x) if result != -1: print(\u0026#34;Element dizinde %d. sırada mevcut\u0026#34; % result) else: print(\u0026#34;Element dizide değildir\u0026#34;) // X\u0026#39;in indexini döndürür, yoksa -1 döndürür function binarySearch(arr, x) { let l = 0; let r = arr.length - 1; let mid; while (r \u0026gt;= l) { mid = l + Math.floor((r - l) / 2); // Eğer eleman ortada mevcutsa // kendine eşittir if (arr[mid] == x) return mid; // Eğer element ortanca değerden küçükse // sadece sol tarafta olabilir if (arr[mid] \u0026gt; x) r = mid - 1; // Bunun dışındaki durumlarda // sadece sağ tarafta olabilir else l = mid + 1; } // Element dizide yoktur return -1; } arr =new Array(2, 3, 4, 10, 40); x = 10; n = arr.length; result = binarySearch(arr, x); (result == -1) ? document.write( \u0026#34;Element dizide değildir\u0026#34;) : document.write(`Element dizinde ${result}. sırada mevcut `); ","permalink":"https://omerfarukdemirel.com.tr/post/binary-search/","summary":"Binary Search Nedir? Binary Search her türlü dataset ile çalışabilen ve içerisindeki verinin indexini bulmamızı sağlayan akıllı bir algoritmadır.\nBüyük dizilerde doğrdan tek-tek yapılan kontrolden daha hızlı çalışır fakat dizinin küçükten büyüğe veya büyükten küçüğe doğru sıralı olması zorunludur, aksi halde çalışmayacaktır.\nBinary Search Nasıl Çalışır? Binary search her bir işlemde arama uzayını yarı yarıya indirmek üzerinde kuruludur. Temel mantığı şu şekildedir;\nDizinin tam orasında bulunan veriyi seçer ve bu veri üzerinden kontrol yapar.","title":"Binary Search"}]